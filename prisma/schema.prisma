generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String            @unique @db.VarChar(100)
  slug            String            @unique @db.VarChar(150)
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  post_categories post_categories[]
}

model comments {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String
  post_id    String?   @db.Uuid
  user_id    String?   @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamp(6)
  posts      posts?    @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_post")
  users      users?    @relation(fields: [user_id], references: [id], onUpdate: NoAction, map: "fk_user")
}

model post_categories {
  post_id     String     @db.Uuid
  category_id String     @db.Uuid
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_postcat_cat")
  posts       posts      @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_postcat_post")

  @@id([post_id, category_id])
}

model posts {
  id              String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String            @db.VarChar(255)
  content         String
  published       Boolean?          @default(false)
  author_id       String?           @db.Uuid
  created_at      DateTime?         @default(now()) @db.Timestamp(6)
  comments        comments[]
  post_categories post_categories[]
  users           users?            @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_author")
}

model users {
  id                    String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String     @db.VarChar(100)
  email                 String     @unique @db.VarChar(150)
  password              String     @db.VarChar(255)
  role                  String?    @default("user") @db.VarChar(20)
  created_at            DateTime?  @default(now()) @db.Timestamp(6)
  passwordchangedat     DateTime?  @db.Timestamp(6)
  passwordresetcode     String?    @db.VarChar(255)
  passwordresetexpires  DateTime?  @db.Timestamp(6)
  passwordresetverified Boolean?   @default(false)
  comments              comments[]
  posts                 posts[]
}
